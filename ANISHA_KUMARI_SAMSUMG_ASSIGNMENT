CODE:

import numpy as np

print("--- 1. Create a 5x5 matrix with values 1-25 ---")
# Create a 1D array and reshape it to a 5x5 matrix.
matrix_5x5 = np.arange(1, 26).reshape(5, 5)
print("5x5 Matrix:")
print(matrix_5x5)
print("\n")

print("--- 2. Generate a 4x4 identity matrix ---")
# Use the np.identity() function to create an identity matrix.
identity_matrix = np.identity(4)
print("4x4 Identity Matrix:")
print(identity_matrix)
print("\n")

print("--- 3. Create a 1D array from 100 to 200 with step 10 ---")
# Use np.arange() to specify the start, stop, and step size.
array_100_200 = np.arange(100, 201, 10)
print("1D Array (100 to 200, step 10):")
print(array_100_200)
print("\n")

print("--- 4. Generate a random 3x3 matrix and find its determinant ---")
# Create a random 3x3 matrix.
random_matrix = np.random.rand(3, 3)
determinant = np.linalg.det(random_matrix)
print("Random 3x3 Matrix:")
print(random_matrix)
print(f"Determinant: {determinant}")
print("\n")

print("--- 5. Create a NumPy array of 10 random integers between 1 and 100 ---")
# Use np.random.randint() to generate a specified number of integers within a range.
random_integers = np.random.randint(1, 101, 10)
print("10 Random Integers:")
print(random_integers)
print("\n")

print("--- 6. Reshape a 1D array of size 12 into a 3x4 matrix ---")
# Create a 1D array of size 12 and use the reshape() method.
array_12 = np.arange(12)
reshaped_matrix = array_12.reshape(3, 4)
print("Original 1D Array:")
print(array_12)
print("Reshaped 3x4 Matrix:")
print(reshaped_matrix)
print("\n")

print("--- 7. Perform matrix multiplication on two 3x3 matrices ---")
# Create two 3x3 matrices.
A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
B = np.array([[9, 8, 7], [6, 5, 4], [3, 2, 1]])
C = A @ B  # Or np.dot(A, B)
print("Matrix A:")
print(A)
print("Matrix B:")
print(B)
print("Result of A * B:")
print(C)
print("\n")

print("--- 8. Find eigenvalues and eigenvectors of a 2x2 matrix ---")
# Define a 2x2 matrix.
M = np.array([[4, 2], [1, 3]])
eigenvalues, eigenvectors = np.linalg.eig(M)
print("Matrix M:")
print(M)
print("Eigenvalues:")
print(eigenvalues)
print("Eigenvectors:")
print(eigenvectors)
print("\n")

print("--- 9. Create a 5x5 matrix and extract its diagonal elements ---")
# Create a random 5x5 matrix and use np.diag() to get the diagonal.
matrix_diag = np.random.rand(5, 5)
diagonal_elements = np.diag(matrix_diag)
print("Original 5x5 Matrix:")
print(matrix_diag)
print("Diagonal Elements:")
print(diagonal_elements)
print("\n")

print("--- 10. Normalize a 1D array to scale values between 0 and 1 ---")
# Create an array and apply the normalization formula: (x - min) / (max - min).
arr_to_normalize = np.array([10, 20, 30, 40, 50])
normalized_arr = (arr_to_normalize - arr_to_normalize.min()) / (arr_to_normalize.max() - arr_to_normalize.min())
print("Original Array:")
print(arr_to_normalize)
print("Normalized Array (0 to 1):")
print(normalized_arr)
print("\n")

print("--- 11. Sort a NumPy array by row and column ---")
# Create a 2D array to sort.
arr_to_sort = np.array([[3, 1, 4], [2, 5, 0]])
sorted_by_row = np.sort(arr_to_sort, axis=1)
sorted_by_col = np.sort(arr_to_sort, axis=0)
print("Original Array:")
print(arr_to_sort)
print("Sorted by Rows:")
print(sorted_by_row)
print("Sorted by Columns:")
print(sorted_by_col)
print("\n")

print("--- 12. Find the indices of max and min values in an array ---")
# Create an array and use argmax() and argmin().
arr_indices = np.array([1, 5, 2, 8, 3, 9, 0])
max_index = np.argmax(arr_indices)
min_index = np.argmin(arr_indices)
print("Original Array:")
print(arr_indices)
print(f"Index of Max Value ({arr_indices[max_index]}): {max_index}")
print(f"Index of Min Value ({arr_indices[min_index]}): {min_index}")
print("\n")

print("--- 13. Flatten a 2D array using ravel() and flatten() ---")
# Create a 2D array.
arr_2d = np.array([[1, 2, 3], [4, 5, 6]])
flat_ravel = arr_2d.ravel()
flat_flatten = arr_2d.flatten()
print("Original 2D Array:")
print(arr_2d)
print("Flattened (ravel()):")
print(flat_ravel)
print("Flattened (flatten()):")
print(flat_flatten)
print("\n")

print("--- 14. Compute the inverse of a 3x3 matrix ---")
# Create an invertible matrix.
M_inv = np.array([[1, 2, 3], [0, 1, 4], [5, 6, 0]])
inverse_M = np.linalg.inv(M_inv)
print("Original Matrix:")
print(M_inv)
print("Inverse Matrix:")
print(inverse_M)
print("\n")

print("--- 15. Generate a random permutation of 1 to 10 ---")
# Use np.random.permutation() on an array of numbers.
permutation = np.random.permutation(np.arange(1, 11))
print("Random Permutation of 1 to 10:")
print(permutation)
print("\n")

print("--- 16. Replace all even numbers with -1 in an array ---")
# Create an array and use boolean indexing to modify elements.
arr_replace = np.arange(21)
arr_replace[arr_replace % 2 == 0] = -1
print("Original Array (0-20):")
print(np.arange(21))
print("Array with Even Numbers Replaced by -1:")
print(arr_replace)
print("\n")

print("--- 17. Compute the dot product of two arrays ---")
# Create two 1D arrays.
A_dot = np.array([1, 2, 3])
B_dot = np.array([4, 5, 6])
dot_product = np.dot(A_dot, B_dot)
print("Array A:")
print(A_dot)
print("Array B:")
print(B_dot)
print("Dot Product:", dot_product)
print("\n")

print("--- 18. Compute the trace of a 5x5 random matrix ---")
# Create a random matrix and use np.trace().
M_trace = np.random.rand(5, 5)
trace = np.trace(M_trace)
print("Random 5x5 Matrix:")
print(M_trace)
print("Trace:", trace)
print("\n")

print("--- 19. Split a 1D array into 3 equal parts ---")
# Create an array of size 12 and split it into 3 arrays of size 4.
arr_split = np.arange(12)
parts = np.split(arr_split, 3)
print("Original Array:")
print(arr_split)
print("Split into 3 parts:")
print(parts)
print("\n")

print("--- 20. Find the mean of a 3D array across axis=0 ---")
# Create a 3D array of shape (3,3,3).
arr_3d = np.arange(27).reshape(3, 3, 3)
mean_axis0 = np.mean(arr_3d, axis=0)
print("3D Array:")
print(arr_3d)
print("Mean across axis=0:")
print(mean_axis0)
print("\n")

print("--- 21. Find the cumulative sum of a NumPy array ---")
# Create an array and use np.cumsum().
arr_cumsum = np.array([1, 2, 3, 4, 5])
cumsum_result = np.cumsum(arr_cumsum)
print("Original Array:")
print(arr_cumsum)
print("Cumulative Sum:")
print(cumsum_result)
print("\n")

print("--- 22. Extract the upper triangular matrix from a 4x4 matrix ---")
# Create a random 4x4 matrix and use np.triu().
arr_triu = np.random.randint(0, 10, size=(4, 4))
upper_triangular = np.triu(arr_triu)
print("Original 4x4 Matrix:")
print(arr_triu)
print("Upper Triangular Matrix:")
print(upper_triangular)
print("\n")

print("--- 23. Generate a 6x6 matrix with a checkerboard pattern ---")
# Use broadcasting and the modulo operator to create the pattern.
checkerboard = np.zeros((6, 6), dtype=int)
checkerboard[1::2, ::2] = 1
checkerboard[::2, 1::2] = 1
print("6x6 Checkerboard Matrix:")
print(checkerboard)
print("\n")

print("--- 24. Apply element-wise square root to a 3x3 matrix ---")
# Create a random matrix and use np.sqrt().
arr_sqrt = np.random.randint(1, 10, size=(3, 3))
sqrt_result = np.sqrt(arr_sqrt)
print("Original 3x3 Matrix:")
print(arr_sqrt)
print("Square Root (element-wise):")
print(sqrt_result)
print("\n")

print("--- 25. Reverse a 1D array without using Python slicing ---")
# Use np.flip() to reverse the array.
arr_reverse = np.arange(20)
reversed_arr = np.flip(arr_reverse)
print("Original Array:")
print(arr_reverse)
print("Reversed Array:")
print(reversed_arr)
print("\n")

print("--- 26. Merge two NumPy arrays vertically and horizontally ---")
# Create two 1D arrays.
arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])
vertical_merge = np.vstack((arr1, arr2))
horizontal_merge = np.hstack((arr1, arr2))
print("Array 1:", arr1)
print("Array 2:", arr2)
print("Vertical Merge (vstack):")
print(vertical_merge)
print("Horizontal Merge (hstack):")
print(horizontal_merge)
print("\n")

print("--- 27. Compute row-wise and column-wise sum of a 2D array ---")
# Create a 2D array.
arr_sum = np.array([[1, 2, 3], [4, 5, 6]])
row_sum = np.sum(arr_sum, axis=1)
column_sum = np.sum(arr_sum, axis=0)
print("Original Array:")
print(arr_sum)
print("Row-wise Sum:", row_sum)
print("Column-wise Sum:", column_sum)
print("\n")

print("--- 28. Replace NaN values with the mean of the column ---")
# Create an array with NaN values.
arr_nan = np.array([[1., 2, np.nan], [4., np.nan, 6], [7., 8, 9]])
# Compute the mean while ignoring NaN values.
col_mean = np.nanmean(arr_nan, axis=0)
# Use the column means to fill in the NaN values.
nan_replaced_arr = np.where(np.isnan(arr_nan), col_mean, arr_nan)
print("Original Array with NaN:")
print(arr_nan)
print("Array with NaN replaced by column mean:")
print(nan_replaced_arr)
print("\n")

print("--- 29. Compute cosine similarity of two 1D arrays ---")
# Create two arrays.
A_cos = np.array([1, 2, 3])
B_cos = np.array([1, 1, 1])
# Formula: dot(A, B) / (norm(A) * norm(B))
cosine_similarity = np.dot(A_cos, B_cos) / (np.linalg.norm(A_cos) * np.linalg.norm(B_cos))
print("Array A:", A_cos)
print("Array B:", B_cos)
print("Cosine Similarity:", cosine_similarity)
print("\n")

print("--- 30. Rotate a 4x4 array by 90 degrees ---")
# Create a random 4x4 matrix and use np.rot90().
arr_rotate = np.arange(16).reshape(4, 4)
rotated_arr = np.rot90(arr_rotate)
print("Original 4x4 Array:")
print(arr_rotate)
print("Rotated by 90 degrees:")
print(rotated_arr)
print("\n")

print("--- 31. Create a structured NumPy array ---")
# Define the data type with fields.
dtype = np.dtype([('name', 'S10'), ('age', 'i4'), ('marks', 'f8')])
# Create the array with data.
structured_array = np.array([('Alice', 25, 85.5), ('Bob', 22, 90.0)], dtype=dtype)
print("Structured Array:")
print(structured_array)
print("\n")

print("--- 32. Compute the rank of a random 3x3 matrix ---")
# Create a random matrix and compute its rank.
matrix_rank = np.random.rand(3, 3)
rank = np.linalg.matrix_rank(matrix_rank)
print("Random 3x3 Matrix:")
print(matrix_rank)
print("Rank:", rank)
print("\n")

print("--- 33. Normalize each row to have unit length ---")
# Create a random 5x5 matrix.
matrix_unit_norm = np.random.rand(5, 5)
# Compute the norm of each row and use broadcasting to normalize.
row_norms = np.linalg.norm(matrix_unit_norm, axis=1, keepdims=True)
normalized_rows = matrix_unit_norm / row_norms
print("Original 5x5 Matrix:")
print(matrix_unit_norm)
print("Matrix with Normalized Rows:")
print(normalized_rows)
print("\n")

print("--- 34. Check if two arrays are equal element-wise ---")
# Create two arrays to compare.
arr_a = np.array([1, 2, 3])
arr_b = np.array([1, 2, 3])
arr_c = np.array([1, 2, 4])
print("Array A:", arr_a)
print("Array B:", arr_b)
print("Array C:", arr_c)
print("A == B (element-wise):", np.array_equal(arr_a, arr_b))
print("A == C (element-wise):", np.array_equal(arr_a, arr_c))
print("\n")

print("--- 35. Compute histogram of a random dataset ---")
# Generate a random dataset.
data = np.random.randn(1000)
# Compute the histogram.
hist, bins = np.histogram(data, bins=10)
print("Histogram Bins:", bins)
print("Histogram Counts:", hist)
print("\n")

print("--- 36. Apply broadcasting to add a 1D array to a 2D array ---")
# Create a 2D array and a 1D array.
A_broadcast = np.array([[1, 2, 3], [4, 5, 6]])
B_broadcast = np.array([10, 20, 30])
result_broadcast = A_broadcast + B_broadcast
print("2D Array A:")
print(A_broadcast)
print("1D Array B:")
print(B_broadcast)
print("Result of A + B (Broadcasting):")
print(result_broadcast)
print("\n")

print("--- 37. Find unique values and their counts in an array ---")
# Create an array with duplicates.
arr_unique = np.array([1, 2, 2, 3, 4, 4, 4, 5])
unique_values, counts = np.unique(arr_unique, return_counts=True)
print("Original Array:", arr_unique)
print("Unique Values:", unique_values)
print("Counts:", counts)
print("\n")

print("--- 38. Find Pearson correlation coefficient of two arrays ---")
# Create two arrays.
x_corr = np.array([1, 2, 3, 4, 5])
y_corr = np.array([5, 4, 3, 2, 1])
corr_matrix = np.corrcoef(x_corr, y_corr)
print("Array x:", x_corr)
print("Array y:", y_corr)
print("Pearson Correlation Coefficient Matrix:")
print(corr_matrix)
print("Pearson Correlation Coefficient:", corr_matrix[0, 1])
print("\n")

print("--- 39. Compute numerical gradient of a 1D array ---")
# Create a 1D array (e.g., y = x^2)
x_grad = np.linspace(0, 10, 100)
y_grad = x_grad**2
gradient = np.gradient(y_grad, x_grad)
print("Gradient of y = x^2:")
print(gradient[:5]) # Print first 5 values for brevity
print("\n")

print("--- 40. Perform Singular Value Decomposition (SVD) ---")
# Create a random 3x3 matrix.
matrix_svd = np.random.rand(3, 3)
U, S, V = np.linalg.svd(matrix_svd)
print("Original 3x3 Matrix:")
print(matrix_svd)
print("U (Left Singular Vectors):")
print(U)
print("S (Singular Values):")
print(S)
print("V (Right Singular Vectors):")
print(V)
print("\n")

OUTPUT:

1) 5x5 matrix with values 1..25:
[[ 1  2  3  4  5]
 [ 6  7  8  9 10]
 [11 12 13 14 15]
 [16 17 18 19 20]
 [21 22 23 24 25]]

2) 4x4 identity matrix:
[[1. 0. 0. 0.]
 [0. 1. 0. 0.]
 [0. 0. 1. 0.]
 [0. 0. 0. 1.]]

3) 1D array 100..200 step 10:
[100 110 120 130 140 150 160 170 180 190 200]

4) Random 3x3 matrix and its determinant:
[[0.548814 0.715189 0.602763]
 [0.544883 0.423655 0.645894]
 [0.437587 0.891773 0.963663]]
det = -0.08430330697685008

5) Array of 10 random integers between 1 and 100:
[59 66 40 88 47 89 82 38 26 78]

6) Reshape 1D size 12 into 3x4:
[[ 1  2  3  4]
 [ 5  6  7  8]
 [ 9 10 11 12]]

7) Two 3x3 matrices and multiplication:
A:
 [[1 2 3]
 [4 5 6]
 [7 8 9]]
B:
 [[9 8 7]
 [6 5 4]
 [3 2 1]]
A @ B:
 [[ 30  24  18]
 [ 84  69  54]
 [138 114  90]]

8) Eigenvalues and eigenvectors of 2x2 matrix:
Matrix:
 [[ 4 -2]
 [ 1  1]]
Eigenvalues: [3. 2.]
Eigenvectors:
 [[0.894427 0.707107]
 [0.447214 0.707107]]

9) 5x5 random matrix and its diagonal:
[[0.337396 0.648172 0.368242 0.957155 0.140351]
 [0.870087 0.473608 0.800911 0.520477 0.67888 ]
 [0.720633 0.58202  0.537373 0.758616 0.105908]
 [0.4736   0.186332 0.736918 0.21655  0.135218]
 [0.324141 0.149675 0.222321 0.386489 0.902598]]
diag: [0.337396 0.473608 0.537373 0.21655  0.902598]

10) Normalize 1D array to [0,1]:
original: [10 20 30 40 50]
normalized: [0.   0.25 0.5  0.75 1.  ]

11) Sort a 4x4 array by row and by column:
Original:
 [[43 59 32  2]
 [66 42 58 36]
 [12 47 83 92]
 [ 1 15 54 13]]
Row-wise sorted:
 [[ 2 32 43 59]
 [36 42 58 66]
 [12 47 83 92]
 [ 1 13 15 54]]
Col-wise sorted:
 [[ 1 15 32  2]
 [12 42 54 13]
 [43 47 58 36]
 [66 59 83 92]]

12) Indices of max and min in 1D array:
[43 85 76 69  7 69 48  4 77 53 79 16 21 59 24]
argmax: 1 argmin: 7

13) Flatten using ravel() and flatten():
ravel: [1 2 3 4]
flatten: [1 2 3 4]

14) Inverse of a 3x3 matrix:
[[1 2 1]
 [0 1 0]
 [2 3 4]]
inverse:
 [[ 2.  -2.5 -0.5]
 [ 0.   1.   0. ]
 [-1.   0.5  0.5]]

15) Random permutation of 1..10:
[ 3  5  8  4  7  9  2  1 10  6]

16) Replace even numbers in 0..20 with -1:
[-1  1 -1  3 -1  5 -1  7 -1  9 -1 11 -1 13 -1 15 -1 17 -1 19 -1]

17) Dot product of two arrays:
dot: 32

18) Trace of 5x5 random matrix:
[[0.820993 0.097101 0.837945 0.096098 0.976459]
 [0.468651 0.976761 0.604846 0.739264 0.039188]
 [0.282807 0.120197 0.29614  0.118728 0.317983]
 [0.414263 0.064147 0.692472 0.566601 0.265389]
 [0.523248 0.093941 0.575946 0.929296 0.318569]]
trace: 2.9790649222183156

19) Split 1D array into 3 equal parts:
[array([1, 2, 3, 4]), array([5, 6, 7, 8]), array([ 9, 10, 11, 12])]

20) 3D array shape (3,3,3) mean across axis=0:
arr3d:
 [[[0.66741  0.131798 0.716327]
  [0.289406 0.183191 0.586513]
  [0.020108 0.82894  0.004695]]

 [[0.677817 0.270008 0.735194]
  [0.962189 0.248753 0.576157]
  [0.592042 0.572252 0.223082]]

 [[0.952749 0.447125 0.846409]
  [0.699479 0.297437 0.813798]
  [0.396506 0.881103 0.581273]]]
mean axis=0:
 [[0.765992 0.282977 0.765977]
 [0.650358 0.243127 0.658823]
 [0.336218 0.760765 0.269683]]

21) Cumulative sum of array:
cumsum: [ 1  3  6 10 15]

22) 4x4 matrix random ints and upper triangular:
matrix:
 [[6 1 7 6]
 [4 2 9 1]
 [5 7 6 8]
 [9 9 3 9]]
upper triangular:
 [[6 1 7 6]
 [0 2 9 1]
 [0 0 6 8]
 [0 0 0 9]]

23) 6x6 checkerboard pattern (0,1):
[[0 1 0 1 0 1]
 [1 0 1 0 1 0]
 [0 1 0 1 0 1]
 [1 0 1 0 1 0]
 [0 1 0 1 0 1]
 [1 0 1 0 1 0]]

24) 3x3 random matrix and element-wise sqrt:
[[0.135474 0.298282 0.569965]
 [0.590873 0.574325 0.653201]
 [0.652103 0.431418 0.896547]]
sqrt:
 [[0.368068 0.546152 0.75496 ]
 [0.768682 0.757842 0.808208]
 [0.807529 0.656825 0.946861]]

25) Reverse 1D array of 20 elements without slicing:
original: [ 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20]
reversed: [20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1]

26) Merge two arrays vertically and horizontally:
vstack:
 [[1 2]
 [3 4]
 [5 6]
 [7 8]]
hstack:
 [[1 2 5 6]
 [3 4 7 8]]

27) Row-wise and column-wise sum of 2D array:
row sum: [3 7]
col sum: [4 6]

28) Replace NaN with mean of column:
before:
 [[ 1. nan  3.]
 [ 4.  5. nan]]
after:
 [[1. 5. 3.]
 [4. 5. 3.]]

29) Cosine similarity of two 1D arrays:
cosine similarity: 0.9746318461970762

30) Rotate 4x4 by 90 degrees:
original:
 [[ 1  2  3  4]
 [ 5  6  7  8]
 [ 9 10 11 12]
 [13 14 15 16]]
rot90:
 [[ 4  8 12 16]
 [ 3  7 11 15]
 [ 2  6 10 14]
 [ 1  5  9 13]]

31) Structured array with fields (name, age, marks):
[('Alice', 20, 85.5) ('Bob', 22, 90. )]
names: ['Alice' 'Bob']
ages: [20 22]
marks: [85.5 90. ]

32) Rank of random 3x3 matrix:
[[0.367562 0.435865 0.891923]
 [0.806194 0.703889 0.100227]
 [0.919483 0.714241 0.998847]]
rank: 3

33) Normalize rows of 5x5 random matrix to unit length:
original:
 [[0.149448 0.868126 0.162493 0.61556  0.12382 ]
 [0.848008 0.807319 0.569101 0.407183 0.069167]
 [0.697429 0.453543 0.722056 0.866382 0.975522]
 [0.855803 0.011714 0.359978 0.729991 0.17163 ]
 [0.521037 0.054338 0.199997 0.018522 0.793698]]
row-normalized:
 [[0.136619 0.793603 0.148544 0.562718 0.113191]
 [0.620899 0.591107 0.416687 0.298134 0.050643]
 [0.408438 0.26561  0.42286  0.507383 0.571298]
 [0.717048 0.009815 0.301613 0.611634 0.143803]
 [0.536061 0.055905 0.205764 0.019056 0.816585]]
row norms after normalization: [1. 1. 1. 1. 1.]

34) Element-wise equality check:
[ True  True False]

35) Histogram of 1000 random numbers:
hist counts: [  4  12  58 142 216 265 188  88  23   4]
bin edges: [-3.514768 -2.853138 -2.191508 -1.529879 -0.868249 -0.206619  0.455011
  1.116641  1.778271  2.439901  3.101531]

36) Broadcasting: add 1D to 2D:
broadcast result:
 [[11 22 33]
 [14 25 36]]

37) Unique values and counts:
unique: [1 2 3 4]
counts: [1 2 3 1]

38) Pearson correlation coefficient of two arrays:
pearson: 0.9999999999999999

39) Numerical gradient of 1D array:
gradient: [1.  1.5 2.5 3.5 4. ]

40) SVD of random 3x3 matrix:
matrix:
 [[0.667215 0.798079 0.550994]
 [0.980466 0.588662 0.045511]
 [0.197983 0.404774 0.601277]]
U:
 [[-0.689679  0.271629 -0.671238]
 [-0.625846 -0.689865  0.363873]
 [-0.364225  0.671047  0.645783]]
S (singular values):
 [1.686336 0.640518 0.078674]
Vt:
 [[-0.679518 -0.632293 -0.372104]
 [-0.565635  0.128499  0.814583]
 [ 0.46724  -0.763998  0.444964]]
